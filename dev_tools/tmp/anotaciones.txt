crear funcion similar a la de $resultado=PCO_ConsultarTablas();  pero para campos pues esta bajo mysql solamente
actualizar esa funcion en tablas->editar_tabla e informes->editar_informe
PILAS: la funcion ya existe en comunes como  function PCO_ConsultarColumnas($tabla)

esto valida si existe la constante...
	defined( '_VALID_MOS' ) or die( 'Direct Access to this location is not allowed.' );
esto define la constante...  al ser constante que puede estar desde iniciod e sesion no se puede enviar por URL
    define( 'PCLZIP_READ_BLOCK_SIZE', 2048 );


Revisar el uso de CANVAS para html5


http://www.phpclasses.org/package/7661-PHP-Update-database-and-files-from-a-remote-server.html


ENLACE1: http://blog-indomita.blogspot.com/2008/08/realizar-backup-mysql-desde-php.html
ENLACE2: http://www.forosdelweb.com/f18/backup-bd-yodumpeo-1-0b-166532/
ENLACE3: http://webelop.com.ar/php/como-hacer-un-backup-de-mysql-desde-php/
ENLACE3: http://webelop.com.ar/php/como-hacer-un-backup-de-mysql-desde-php/
ENLACE4: http://www.elwebmaster.com/articulos/10-opciones-para-un-backup-rapido-de-tu-base-de-datos-de-mysql
ENLACE5: http://www.codenb.com/backups-mysql-con-php-66/
ENLACE6 - PDO: http://webdevrefinery.com/forums/topic/4021-sql-backup-with-pdo/
ENLACE7 - PDO: http://www.forosdelweb.com/f86/metadatos-usando-pdo-785782/
ENLACE8 - PDO Excelente:  http://www.phpkode.com/scripts/item/db-backup-class/
ENLACE9 - PDO: Excelente (igual?): http://www.phpclasses.org/browse/file/33388.html



uso de parametros y tipos de dato
//, PDO::PARAM_INT, PARAM_STR , PARAM_LOB (para stream files?)
			/*
			$sql = "SET @latitude=:lat;
			SET @longitude=:lon;
			SET @radius=20;
			SET @lng_min=@longitude - @radius/abs(cos(radians(@latitude))*69);
			SET @lng_max=@longitude + @radius/abs(cos(radians(@latitude))*69);
			SET @lat_min=@latitude - (@radius/69);
			SET @lat_max=@latitude + (@radius/69);"; 
			$this->_db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_WARNING);
			$stmt = $this->_db->prepare($sql);
			$stmt->bindParam(':lat', $lat, PDO::PARAM_STR);
			$stmt->bindParam(':lon', $lon, PDO::PARAM_STR);
			$stmt->execute();







/*
	//Execute the transactional operations
	function transaction($arg){
		$this->err_msg = "";
		if($this->con!=null){
			try{
				if($arg=="B")
					$this->con->beginTransaction();
				elseif($arg=="C")
					$this->con->commit();
				elseif($arg=="R")
					$this->con->rollBack();
				else{
					$this->err_msg = "Error: The passed param is wrong! just allow [B=begin, C=commit or R=rollback]";
					return false;
				}
			}catch(PDOException $e){
				$this->err_msg = "Error: ". $e->getMessage();
				return false;
			}
		}else{
			$this->err_msg = "Error: Connection to database lost.";
			return false;
		}
	}


	//Querys Anti SQL Injections
	function query_secure($sql_statement, $params, $fetch_rows=false, $unnamed=false, $delimiter="|"){
		$this->err_msg = "";
		if(!isset($unnamed)) $unnamed = false;
		if(trim((string)$delimiter)==""){
			$this->err_msg = "Error: Delimiter are required.";
			return false;
		}
		if($this->con!=null){
			$obj = $this->con->prepare($sql_statement);
			if(!$unnamed){
				for($i=0;$i<count($params);$i++){
					$params_split = explode($delimiter,$params[$i]);
					(trim($params_split[2])=="INT") ? $obj->bindParam($params_split[0], $params_split[1], PDO::PARAM_INT) : $obj->bindParam($params_split[0], $params_split[1], PDO::PARAM_STR);
				}
				try{
					$obj->execute();
				}catch(PDOException $e){
					$this->err_msg = "Error: ". $e->getMessage();
					return false;
				}
			}else{
				try{
					$obj->execute($params);
				}catch(PDOException $e){
					$this->err_msg = "Error: ". $e->getMessage();
					return false;
				}
			}
			if($fetch_rows)
				return $obj->fetchAll();
			if(is_numeric($this->con->lastInsertId()))
				return $this->con->lastInsertId();
			return true;
		}else{
			$this->err_msg = "Error: Connection to database lost.";
			return false;
		}
	}


	//Return total records from query as integer
	function rowcount(){
		$this->err_msg = "";
		if($this->con!=null){
			try{
				$stmnt_tmp = $this->stmntCount($this->sql);
				if($stmnt_tmp!=false && $stmnt_tmp!=""){
					return $this->query_single($stmnt_tmp);
				}else{
					$this->err_msg = "Error: A few data required.";
					return -1;
				}
			}catch(PDOException $e){
				$this->err_msg = "Error: ". $e->getMessage();
				return -1;
			}
		}else{
			$this->err_msg = "Error: Connection to database lost.";
			return false;
		}
	}

	//Insert and get newly created id
	function insert($table, $data){
		$this->err_msg = "";
		if($this->con!=null){
			try{
				$txt_fields = "";
				$txt_values = "";
				$data_column = explode(",", $data);
				for($x=0;$x<count($data_column);$x++){
					list($field, $value) = explode("=", $data_column[$x]);
					$txt_fields.= ($x==0) ? $field : ",".$field;
					$txt_values.= ($x==0) ? $value : ",".$value;
				}
				$this->con->exec("INSERT INTO ".$table." (".$txt_fields.") VALUES(".$txt_values.");");
				return $this->con->lastInsertId();
			}catch(PDOException $e){
				$this->err_msg = "Error: ". $e->getMessage();
				return false;
			}
		}else{
			$this->err_msg = "Error: Connection to database lost.";
			return false;
		}
	}




	//Get latest specified id from specified table
	function getLatestId($db_table, $table_field){
		$this->err_msg = "";
		$sql_statement = "";
		$dbtype = $this->database_type;

		if($dbtype=="sqlsrv" || $dbtype=="mssql" || $dbtype=="ibm" || $dbtype=="dblib" || $dbtype=="odbc"){
			$sql_statement = "SELECT TOP 1 ".$table_field." FROM ".$db_table." ORDER BY ".$table_field." DESC;";
		}elseif($dbtype=="oracle"){
			$sql_statement = "SELECT ".$table_field." FROM ".$db_table." WHERE ROWNUM<=1 ORDER BY ".$table_field." DESC;";
		}elseif($dbtype=="ifmx" || $dbtype=="fbd"){
			$sql_statement = "SELECT FIRST 1 ".$table_field." FROM ".$db_table." ORDER BY ".$table_field." DESC;";
		}elseif($dbtype=="mysql" || $dbtype=="sqlite2" || $dbtype=="sqlite3"){
			$sql_statement = "SELECT ".$table_field." FROM ".$db_table." ORDER BY ".$table_field." DESC LIMIT 1;";
		}elseif($dbtype=="pg"){
			$sql_statement = "SELECT ".$table_field." FROM ".$db_table." ORDER BY ".$table_field." DESC LIMIT 1 OFFSET 0;";
		}

		if($this->con!=null){
			try{
				return $this->query_single($sql_statement);
			}catch(PDOException $e){
				$this->err_msg = "Error: ". $e->getMessage();
				return false;
			}
		}else{
			$this->err_msg = "Error: Connection to database lost.";
			return false;
		}
	}




/******************************************
 *
 * PDO Database Class Manual
 *
 * @author:    	Evert Ulises German Soto
 * @copyright: 	wArLeY996 2012
 * @version: 	2.1
 *
 *
 *		CHANGELOG:
 *
 * v2.1: Added transactional method, now you can feel the power and care for the integrity of your database with transactions.
 * v2.0: Optimized all class code, added unnamed placeholder option in query_secure(), added method properties() for get information about server and connection. Manual updated for provide more clearly examples.
 * v1.9: Added method for secure querys and avoid SQL Injections.
 * v1.8: Optimized methods update, delete and getLatestId. Methods update and delete allow empty conditions for several changes.
 * v1.7: Optimized method rowcount(), now build automatic query for count(*).
 * v1.6: Fix the error handler in the connection database, modified the constructor of the class. (Critical)
 * v1.5: Added 2 methods: 1.- ShowDBS and 2.- ShowTables, return databases existing on host, return all tables of database relatively.
 * v1.4: Added method getError(), this return error description if exist.
 * v1.3: Fix the "insert" operation works in any database.
 * v1.2: Added method getLatestId(table, id), return the latest id (primary key autoincrement).
 * v1.1: After insert, delete or update operations, the result is the affected rows.
 * v1.0: First version working.

 * 		INTRODUCTION:
 * Why you Should be using PHP's PDO for Database Access...
 * PDO – PHP Data Objects, is a database access layer providing a uniform method of access to multiple databases.
 * It doesn’t account for database-specific syntax, but can allow for the process of switching databases and platforms to be fairly painless, simply by switching the connection string in many instances.
 *
 *		DATABASES SUPPORT:
 *  You need use this shortcuts for the database type:
 *
 * sqlite2	-> SQLite2 - TESTED
 * sqlite3	-> SQLite3
 * sqlsrv 	-> Microsoft SQL Server (Works under Windows, accept all SQL Server versions [max version 2008]) - TESTED
 * mssql 	-> Microsoft SQL Server (Works under Windows and Linux, but just work with SQL Server 2000) - TESTED
 * mysql 	-> MySQL - TESTED
 * pg 		-> PostgreSQL - TESTED
 * ibm		-> IBM
 * dblib	-> DBLIB
 * odbc		-> Microsoft Access
 * oracle	-> ORACLE
 * ifmx 	-> Informix
 * fbd		-> Firebird - TESTED
 
 * 		HOW TO USE:
 * Ok, I hope the following lines of code will help...
 ************************************************************************************************************************************************/








/*

//First... you need include the class file.
require("pdo_database.class.php");

//Instantiate the class
# object = new wArLeY_DBMS(shortcut_database_type, server, database_name, user, password, port);
$db = new wArLeY_DBMS("mysql", "127.0.0.1", "test", "root", "", "");
$dbCN = $db->Cnxn(); //This step is really neccesary for create connection to database, and getting the errors in methods.
if($dbCN==false) die("Error: Cant connect to database.");
//Every operation you execute can try print this line, for get the latest error ocurred
echo $db->getError(); //Show error description if exist, else is empty.
//For get the conecction and server information only require this:
$db->properties();

//Creating table and execute all sql statements
#Drop table
$db->query('DROP TABLE TB_USERS;');
#Instruction SQL in variable
$query_create_table = <<< EOD
CREATE TABLE TB_USERS (
  ID INTEGER NOT NULL,
  NAME VARCHAR(100) NOT NULL,
  ADDRESS VARCHAR(100) NOT NULL,
  COMPANY VARCHAR(100) NOT NULL
);
EOD;
#Create table
$db->query($query_create_table);
#Alter table
$db->query('ALTER TABLE TB_USERS ADD CONSTRAINT INTEG_13 PRIMARY KEY (ID);');

//Inserting data in table with 2 methods...
//Method 1:
$result = $db->query("INSERT INTO TB_USERS (NAME, ADDRESS, COMPANY) VALUES ('Evert Ulises German', 'Internet #996 Culiacan Sinaloa', 'Freelancer');");
# $result false if operation fail.
//Method 2:
#insert(table_name, data_to_insert[field=data]);
$result = $db->insert("TB_USERS", "NAME='Evert Ulises German',ADDRESS='Tetameche #3035 Culiacan Sin. Mexico',COMPANY='Freelancer'");
# $result have the inserted id or false if operation fail. IMPORTANT: For getting the currently id inserted is neccessary define the id field how primary key autoincrement.

//Retrieving rows from query...
$rs = $db->query("SELECT NAME,ADDRESS FROM TB_USERS");
foreach($rs as $row){
	$tmp_name = $row["NAME"];
	$tmp_address = $row["ADDRESS"];
	echo "The user $tmp_name lives in: $tmp_address<br/>";
}

//Once that you have execute any query, you can get total rows.
echo "Total rows: " . $db->rowcount() . "<br/>";

//You can update rows from table with 2 methods...
//Method 1:
$db->query("UPDATE TB_USERS SET NAME='wArLeY996',COMPANY='Freelancer MX' WHERE ID=1;");
//Method 2:
# update(table_name, set_new_data[field=data], condition_if_need_but_not_required);
$getAffectedRows = $db->update("TB_USERS", "NAME='wArLeY996',COMPANY='Freelancer MX'", "ID=1");
$getAffectedRows = $db->update("TB_USERS", "NAME='wArLeY996',COMPANY='Freelancer MX'"); //This works too, must be careful!

//You can delete rows from table with 2 methods...
//Method 1:
$result = $db->query("DELETE FROM TB_USERS WHERE ID=1;");
# $result false if operation fail.
//Method 2:
# delete(table_name, condition_if_need_but_not_required);
$getAffectedRows = $db->delete("TB_USERS", "ID=1");
$getAffectedRows = $db->delete("TB_USERS"); //This works too, must be careful!

//You can get the latest id inserted in your table...
# getLatestId(table_name, field_id);
$latestInserted = $db->getLatestId("TB_USERS","ID");
//IMPORTANT: For getting the latest id inserted is neccessary define the id field how autoincrement.

//Disconnect from database
$db->disconnect();

# NEW!!!
//Using Transactions
$db->transaction("B"); //Begin the Transaction
$db->delete("TB_USERS", "ID=1");
$db->delete("TB_USERS", "ID=2");
$db->transaction("C"); //Commit and apply changes
$db->transaction("R"); //OR you can Rollback and undo changes like Ctrl+Z

#------------------------------------------ SECURE METHODS ANTI SQL INJECTIONS ----------------------------------------------------------------
# METHOD: query_secure, "first_param": query statement, "second_param": array with params, "third_param": if you specify true, you can get the recordset, else you get true, "fourth_param": unnamed or named placeholders is your choice, "fifth_param": for change your delimiter.
# Note: the third_param, fourth_param and fifth_param not are required, have a default values: false, false, "|" relatively.
# IMPORTANT: the delimiter default is "|" (pipe), is neccessary change this delimiter if exist in your data.
#----------------------------------------------------------------------------------------------------------------------------------------------
//SELECT statement with option "NAMED PLACEHOLDERS":
$params = array(":id|2|INT");
$rows = $db->query_secure("SELECT NAME FROM TB_USERS WHERE ID=:id;", $params, false);
if($rows!=false){
	foreach($rows as $row){
		echo "User: ". $row["NAME"] ."<br />";
	}
}
$rows = null;
//SELECT statement with option "UNNAMED PLACEHOLDERS":
$params = array(2);
$rows = $db->query_secure("SELECT NAME FROM TB_USERS WHERE ID=?;", $params, false);
if($rows!=false){
	foreach($rows as $row){
		echo "User: ". $row["NAME"] ."<br />";
	}
}
$rows = null;

//INSERT data with option "NAMED PLACEHOLDERS":
$params = array(":id|2|INT", ":name|Amy Julyssa German|STR", ":address|Internet #996 Culiacan Sinaloa|STR", ":company|Nothing|STR");
$result = $db->query_secure("INSERT INTO TB_USERS (ID,NAME,ADDRESS,COMPANY) VALUES(:id,:name,:address,:company);", $params, false);
//INSERT data with option "UNNAMED PLACEHOLDERS":
$params = array(2, "Amy Julyssa German", "Internet #996 Culiacan Sinaloa", "Nothing");
$result = $db->query_secure("INSERT INTO TB_USERS (ID,NAME,ADDRESS,COMPANY) VALUES(?,?,?,?);", $params, false, true);

//UPDATE data with option "NAMED PLACEHOLDERS":
$params = array(":id|2|INT", ":address|Internet #996 Culiacan, Sinaloa, Mexico|STR", ":company|Nothing!|STR");
$result = $db->query_secure("UPDATE TB_USERS SET ADDRESS=:address,COMPANY=:company WHERE ID=:id;", $params, false);
//UPDATE data with option "UNNAMED PLACEHOLDERS":
$params = array("Internet #996 Culiacan, Sinaloa, Mexico", "Nothing!", 2);
$result = $db->query_secure("UPDATE TB_USERS SET ADDRESS=?,COMPANY=? WHERE ID=?;", $params, false, true);

//DELETE data with option "NAMED PLACEHOLDERS":
$params = array(":id|2|INT");
$result = $db->query_secure("DELETE FROM TB_USERS WHERE ID=:id;", $params, false);
//DELETE data with option "UNNAMED PLACEHOLDERS":
$params = array(2);
$result = $db->query_secure("DELETE FROM TB_USERS WHERE ID=?;", $params, false, true);

//IMPORTANT: UPDATE and DELETE works fine but not return the affected rows, just return false if fails.
echo "AFFECTEDS -> " . (($result===false) ? "NO... ".$db->getError() : "YES") . "<br />";

//----------------------------------------------------------------------------------------------------------------

//For general information are added this methods:
//If you need get columns name, you can do it...
$column_array = $db->columns("TB_USERS");
if($column_array!=false){
	foreach($column_array as $column){
		echo "$column<br/>";
	}
}else{
	//ERROR
	echo $db->getError();
}

//If you need get all tables from you database...
$rs = $db->ShowTables("test");  //Depending of your type database you can specify the database
foreach($rs as $row){
	$tmp_table = $row[0];
	echo "The table from database is: $tmp_table<br/>";
}

//If you need get all databases of your server...
$rs = $db->ShowDBS();  //Depending of your type database you can get results
foreach($rs as $row){
	$tmp_table = $row[0];
	echo "Database named: $tmp_table<br/>";
}





*/